#!/usr/bin/env python2
#-*- mode: python; -*-
from support.config import ConfigBuilder, slurp, exe_available
from os import environ, curdir, listdir
from os.path import abspath
from sys import argv

NAME = 'mesh'
VERSION = '0.1.0'

c = ConfigBuilder()

c.append('version', VERSION)
c.config('version', VERSION)
c.config('canonical-name', NAME)
c.config('package-bugreport', 'bpowers@cs.umass.edu')

if c.debug_build:
    c.append('cflags', '-g')
    c.append('ldflags', '-g')
#else:

if c.optimize_build:
    c.append('cflags', '-DNDEBUG')
    c.append('cflags', '-O3 -flto')
    c.append('ldflags', '-O3 -flto')
    c.append('cflags', '-pthread -D_FORTIFY_SOURCE=2')
else:
    c.append('cflags', '-O0')

c.append('cflags', '-DMOZ_MEMORY=1')

c.append('cflags', '-fPIC')
c.append('cflags', '-pipe')
c.append('cflags', '-fno-builtin-malloc')
c.append('cflags', '-fno-omit-frame-pointer')
c.append('cflags', '-ffunction-sections')
c.append('cflags', '-fdata-sections')
c.append('cflags', '-Werror=implicit-function-declaration')
c.append('cflags', '-Werror=implicit-int')
c.append('cflags', '-Werror=pointer-sign')
c.append('cflags', '-Werror=pointer-arith')

c.append('cflags', '-D_DEFAULT_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=700')

c.append('cflags', '-Wall -Wextra -pedantic')
c.append('cflags', '-Wundef')
c.append('cflags', '-Wno-gnu-statement-expression')
c.append('cflags', '-Wno-unused-parameter')
c.append('cflags', '-Wno-unused-variable')
c.append('cflags', '-Wno-c99-extensions')
c.append('cflags', '-Woverloaded-virtual')
c.append('cflags', '-Werror=return-type')
c.append('cflags', '-Wtype-limits')
c.append('cflags', '-Wempty-body')
c.append('cflags', '-Wno-ctor-dtor-privacy')
c.append('cflags', '-Winvalid-offsetof')
c.append('cflags', '-Wvariadic-macros')
c.append('cflags', '-Wcast-align')

c.append('ldflags', '-Wl,--no-add-needed')
c.append('ldflags', '-Wl,--sort-common')
c.append('ldflags', '-Wl,--gc-sections')
c.append('ldflags', '-Wl,--hash-style=both')
c.append('ldflags', '-Wl,--no-undefined')
c.append('ldflags', '-Wl,-Bsymbolic-functions')
c.append('ldflags', '-Wl,-z,now,-z,relro')
c.append('ldflags', '-ftls-model=initial-exec')

c.append('libs', '-lm -lpthread')
c.append('libs', '-ldl')

c.append('cxxflags', '-std=gnu++14 -I .')
c.append('cxxflags', '$(CFLAGS)')

# for development work, clang has much, much nicer error messages
c.prefer('cc', 'clang')
c.prefer('cxx', 'clang++')

c.prefer('ar', 'llvm-ar')
c.prefer('ranlib', 'llvm-ranlib')

if not 'cc' in c.env or c.env['cc'] != 'clang':
    c.append('cflags', '-Wa,--noexecstack')
elif exe_available('lld'):
    # use LLVM's linker if available
    c.append('ldflags', '-fuse-ld=lld')

c.generate()
